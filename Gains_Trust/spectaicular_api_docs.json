openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/:
    get:
      operationId: root_retrieve
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/check_availability/:
    get:
      operationId: check_availability_retrieve
      tags:
      - check_availability
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/logout/:
    post:
      operationId: logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/sets/:
    get:
      operationId: sets_list
      description: ViewSet for managing sets
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - sets
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSetDictList'
          description: ''
    post:
      operationId: sets_create
      description: ViewSet for managing sets
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetDict'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
  /api/sets/{id}/:
    get:
      operationId: sets_retrieve
      description: ViewSet for managing sets
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
    put:
      operationId: sets_update
      description: ViewSet for managing sets
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetDict'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
    patch:
      operationId: sets_partial_update
      description: ViewSet for managing sets
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
    delete:
      operationId: sets_destroy
      description: ViewSet for managing sets
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sets/{id}/complete_set/:
    patch:
      operationId: sets_complete_set_partial_update
      description: Mark a SetDict as Complete or Undo Completion
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
  /api/sets/{id}/move_set/:
    patch:
      operationId: sets_move_set_partial_update
      description: |-
        Moves a set to a new position,
        keeping all other sets ordered sequentiallly.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
  /api/sets/{id}/skip_set/:
    patch:
      operationId: sets_skip_set_partial_update
      description: Moves a set to the last position in `set_order`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this set dict.
        required: true
      tags:
      - sets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSetDict'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDict'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      description: ViewSet for managing users
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      description: ViewSet for managing users
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      description: ViewSet for managing users
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: Override update to prevent users from modifying other accounts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: ViewSet for managing users
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: ViewSet for managing users
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/login/:
    post:
      operationId: users_login_create
      description: User login with JWT token response
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/me/:
    get:
      operationId: users_me_retrieve
      description: Retrieve or update the logged-in user's details
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_me_partial_update
      description: Retrieve or update the logged-in user's details
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/register/:
    post:
      operationId: users_register_create
      description: User registration
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/weights/:
    get:
      operationId: weights_list
      description: ViewSet for managing user weight entries.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - weights
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWeightList'
          description: ''
    post:
      operationId: weights_create
      description: ViewSet for managing user weight entries.
      tags:
      - weights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Weight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Weight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Weight'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
          description: ''
  /api/weights/{id}/:
    get:
      operationId: weights_retrieve
      description: ViewSet for managing user weight entries.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight.
        required: true
      tags:
      - weights
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
          description: ''
    put:
      operationId: weights_update
      description: ViewSet for managing user weight entries.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight.
        required: true
      tags:
      - weights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Weight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Weight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Weight'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
          description: ''
    patch:
      operationId: weights_partial_update
      description: ViewSet for managing user weight entries.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight.
        required: true
      tags:
      - weights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWeight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWeight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWeight'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
          description: ''
    delete:
      operationId: weights_destroy
      description: ViewSet for managing user weight entries.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight.
        required: true
      tags:
      - weights
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/workouts/:
    get:
      operationId: workouts_list
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - workouts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWorkoutList'
          description: ''
    post:
      operationId: workouts_create
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Workout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Workout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
  /api/workouts/{id}/:
    get:
      operationId: workouts_retrieve
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
    put:
      operationId: workouts_update
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Workout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Workout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
    patch:
      operationId: workouts_partial_update
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
    delete:
      operationId: workouts_destroy
      description: |-
        ViewSet for managing Workouts.
        - `list`: Retrieves all workouts (paginated).
        - `retrieve`: Retrieves a single workout by ID.
        - `create`: Creates a new workout.
        - `update`: Updates a workout.
        - `destroy`: Deletes a workout.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/workouts/{id}/complete_workout/:
    patch:
      operationId: workouts_complete_workout_partial_update
      description: Marks a workout as complete.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
  /api/workouts/{id}/duplicate/:
    post:
      operationId: workouts_duplicate_create
      description: Duplicates a workout and its sets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Workout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Workout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
  /api/workouts/{id}/start_workout/:
    patch:
      operationId: workouts_start_workout_partial_update
      description: Starts or restarts a workout timer.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout.
        required: true
      tags:
      - workouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkout'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: ''
components:
  schemas:
    PaginatedSetDictList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SetDict'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedWeightList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Weight'
    PaginatedWorkoutList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Workout'
    PatchedSetDict:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        exercise_name:
          type: string
          maxLength: 255
        set_order:
          type: integer
          readOnly: true
          nullable: true
        set_number:
          type: integer
          readOnly: true
          nullable: true
        set_type:
          type: string
          maxLength: 100
        loading:
          type: number
          format: double
          nullable: true
        reps:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        focus:
          type: string
          maxLength: 150
        rest:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        notes:
          type: string
        complete:
          type: boolean
        is_active_set:
          type: boolean
        set_start_time:
          type: string
          format: date-time
          nullable: true
        set_duration:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        workout:
          type: integer
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 6
        height:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
    PatchedWeight:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        date_recorded:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
    PatchedWorkout:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        workout_name:
          type: string
          maxLength: 255
        date:
          type: string
          format: date
        complete:
          type: boolean
        user_weight:
          type: number
          format: double
          nullable: true
        sleep_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        sleep_quality:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        user:
          type: integer
          readOnly: true
    SetDict:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        exercise_name:
          type: string
          maxLength: 255
        set_order:
          type: integer
          readOnly: true
          nullable: true
        set_number:
          type: integer
          readOnly: true
          nullable: true
        set_type:
          type: string
          maxLength: 100
        loading:
          type: number
          format: double
          nullable: true
        reps:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        focus:
          type: string
          maxLength: 150
        rest:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        notes:
          type: string
        complete:
          type: boolean
        is_active_set:
          type: boolean
        set_start_time:
          type: string
          format: date-time
          nullable: true
        set_duration:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        workout:
          type: integer
          readOnly: true
      required:
      - exercise_name
      - id
      - set_number
      - set_order
      - workout
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 6
        height:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
      required:
      - date_joined
      - id
      - password
      - username
    Weight:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        date_recorded:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
      required:
      - date_recorded
      - id
      - user
      - weight
    Workout:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        workout_name:
          type: string
          maxLength: 255
        date:
          type: string
          format: date
        complete:
          type: boolean
        user_weight:
          type: number
          format: double
          nullable: true
        sleep_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        sleep_quality:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        user:
          type: integer
          readOnly: true
      required:
      - id
      - user
      - workout_name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
